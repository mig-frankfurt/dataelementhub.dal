/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables.daos;


import de.dataelementhub.dal.jooq.enums.ValidationDatatypeType;
import de.dataelementhub.dal.jooq.enums.ValidationSubtypeType;
import de.dataelementhub.dal.jooq.tables.Validation;
import de.dataelementhub.dal.jooq.tables.records.ValidationRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ValidationDao extends DAOImpl<ValidationRecord, de.dataelementhub.dal.jooq.tables.pojos.Validation, Integer> {

    /**
     * Create a new ValidationDao without any configuration
     */
    public ValidationDao() {
        super(Validation.VALIDATION, de.dataelementhub.dal.jooq.tables.pojos.Validation.class);
    }

    /**
     * Create a new ValidationDao with an attached configuration
     */
    public ValidationDao(Configuration configuration) {
        super(Validation.VALIDATION, de.dataelementhub.dal.jooq.tables.pojos.Validation.class, configuration);
    }

    @Override
    public Integer getId(de.dataelementhub.dal.jooq.tables.pojos.Validation object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Validation.VALIDATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchById(Integer... values) {
        return fetch(Validation.VALIDATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.dataelementhub.dal.jooq.tables.pojos.Validation fetchOneById(Integer value) {
        return fetchOne(Validation.VALIDATION.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchOptionalById(Integer value) {
        return fetchOptional(Validation.VALIDATION.ID, value);
    }

    /**
     * Fetch records that have <code>element_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfElementId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Validation.VALIDATION.ELEMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>element_id IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchByElementId(Integer... values) {
        return fetch(Validation.VALIDATION.ELEMENT_ID, values);
    }

    /**
     * Fetch records that have <code>datatype BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfDatatype(ValidationDatatypeType lowerInclusive, ValidationDatatypeType upperInclusive) {
        return fetchRange(Validation.VALIDATION.DATATYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datatype IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchByDatatype(ValidationDatatypeType... values) {
        return fetch(Validation.VALIDATION.DATATYPE, values);
    }

    /**
     * Fetch records that have <code>subtype BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfSubtype(ValidationSubtypeType lowerInclusive, ValidationSubtypeType upperInclusive) {
        return fetchRange(Validation.VALIDATION.SUBTYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subtype IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchBySubtype(ValidationSubtypeType... values) {
        return fetch(Validation.VALIDATION.SUBTYPE, values);
    }

    /**
     * Fetch records that have <code>format BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfFormat(String lowerInclusive, String upperInclusive) {
        return fetchRange(Validation.VALIDATION.FORMAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>format IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchByFormat(String... values) {
        return fetch(Validation.VALIDATION.FORMAT, values);
    }

    /**
     * Fetch records that have <code>unit_of_measure BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfUnitOfMeasure(String lowerInclusive, String upperInclusive) {
        return fetchRange(Validation.VALIDATION.UNIT_OF_MEASURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>unit_of_measure IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchByUnitOfMeasure(String... values) {
        return fetch(Validation.VALIDATION.UNIT_OF_MEASURE, values);
    }

    /**
     * Fetch records that have <code>maximum_characters BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchRangeOfMaximumCharacters(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Validation.VALIDATION.MAXIMUM_CHARACTERS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>maximum_characters IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Validation> fetchByMaximumCharacters(Integer... values) {
        return fetch(Validation.VALIDATION.MAXIMUM_CHARACTERS, values);
    }
}
