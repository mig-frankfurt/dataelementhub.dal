/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.ElementType;
import de.dataelementhub.dal.jooq.enums.Status;
import de.dataelementhub.dal.jooq.tables.records.ScopedIdentifierSimplifiedRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScopedIdentifierSimplified extends TableImpl<ScopedIdentifierSimplifiedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.scoped_identifier_simplified</code>
     */
    public static final ScopedIdentifierSimplified SCOPED_IDENTIFIER_SIMPLIFIED = new ScopedIdentifierSimplified();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScopedIdentifierSimplifiedRecord> getRecordType() {
        return ScopedIdentifierSimplifiedRecord.class;
    }

    /**
     * The column <code>public.scoped_identifier_simplified.id</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.urn</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, String> URN = createField(DSL.name("urn"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.identifier</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, Integer> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.revision</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, Integer> REVISION = createField(DSL.name("revision"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.status</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.Status.class), this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.element_type</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, ElementType> ELEMENT_TYPE = createField(DSL.name("element_type"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.ElementType.class), this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.element_id</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, Integer> ELEMENT_ID = createField(DSL.name("element_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.scoped_identifier_simplified.namespace_id</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, Integer> NAMESPACE_ID = createField(DSL.name("namespace_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.scoped_identifier_simplified.namespace_urn</code>.
     */
    public final TableField<ScopedIdentifierSimplifiedRecord, String> NAMESPACE_URN = createField(DSL.name("namespace_urn"), SQLDataType.CLOB, this, "");

    private ScopedIdentifierSimplified(Name alias, Table<ScopedIdentifierSimplifiedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScopedIdentifierSimplified(Name alias, Table<ScopedIdentifierSimplifiedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"scoped_identifier_simplified\" as  WITH ns_urns AS (\n         SELECT e_1.id AS namespace_id,\n            urn(si_1.*) AS urn\n           FROM (element e_1\n             JOIN scoped_identifier si_1 ON ((e_1.id = si_1.element_id)))\n          WHERE (e_1.element_type = 'NAMESPACE'::element_type)\n        )\n SELECT si.id,\n    urn(si.*) AS urn,\n    si.identifier,\n    si.revision,\n    si.status,\n    e.element_type,\n    e.id AS element_id,\n    si.namespace_id,\n    ns_urns.urn AS namespace_urn\n   FROM (((scoped_identifier si\n     LEFT JOIN element ns ON ((si.namespace_id = ns.id)))\n     LEFT JOIN element e ON ((e.id = si.element_id)))\n     LEFT JOIN ns_urns ON ((si.namespace_id = ns_urns.namespace_id)));"));
    }

    /**
     * Create an aliased <code>public.scoped_identifier_simplified</code> table
     * reference
     */
    public ScopedIdentifierSimplified(String alias) {
        this(DSL.name(alias), SCOPED_IDENTIFIER_SIMPLIFIED);
    }

    /**
     * Create an aliased <code>public.scoped_identifier_simplified</code> table
     * reference
     */
    public ScopedIdentifierSimplified(Name alias) {
        this(alias, SCOPED_IDENTIFIER_SIMPLIFIED);
    }

    /**
     * Create a <code>public.scoped_identifier_simplified</code> table reference
     */
    public ScopedIdentifierSimplified() {
        this(DSL.name("scoped_identifier_simplified"), null);
    }

    public <O extends Record> ScopedIdentifierSimplified(Table<O> child, ForeignKey<O, ScopedIdentifierSimplifiedRecord> key) {
        super(child, key, SCOPED_IDENTIFIER_SIMPLIFIED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ScopedIdentifierSimplified as(String alias) {
        return new ScopedIdentifierSimplified(DSL.name(alias), this);
    }

    @Override
    public ScopedIdentifierSimplified as(Name alias) {
        return new ScopedIdentifierSimplified(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopedIdentifierSimplified rename(String name) {
        return new ScopedIdentifierSimplified(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopedIdentifierSimplified rename(Name name) {
        return new ScopedIdentifierSimplified(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, Integer, Integer, Status, ElementType, Integer, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
