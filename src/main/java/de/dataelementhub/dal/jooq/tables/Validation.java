/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.ValidationDatatypeType;
import de.dataelementhub.dal.jooq.enums.ValidationSubtypeType;
import de.dataelementhub.dal.jooq.tables.records.ValidationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Validation extends TableImpl<ValidationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.validation</code>
     */
    public static final Validation VALIDATION = new Validation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValidationRecord> getRecordType() {
        return ValidationRecord.class;
    }

    /**
     * The column <code>public.validation.id</code>.
     */
    public final TableField<ValidationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.validation.element_id</code>.
     */
    public final TableField<ValidationRecord, Integer> ELEMENT_ID = createField(DSL.name("element_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.validation.datatype</code>.
     */
    public final TableField<ValidationRecord, ValidationDatatypeType> DATATYPE = createField(DSL.name("datatype"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(de.dataelementhub.dal.jooq.enums.ValidationDatatypeType.class), this, "");

    /**
     * The column <code>public.validation.subtype</code>.
     */
    public final TableField<ValidationRecord, ValidationSubtypeType> SUBTYPE = createField(DSL.name("subtype"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.ValidationSubtypeType.class), this, "");

    /**
     * The column <code>public.validation.format</code>.
     */
    public final TableField<ValidationRecord, String> FORMAT = createField(DSL.name("format"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.validation.unit_of_measure</code>.
     */
    public final TableField<ValidationRecord, String> UNIT_OF_MEASURE = createField(DSL.name("unit_of_measure"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.validation.maximum_characters</code>.
     */
    public final TableField<ValidationRecord, Integer> MAXIMUM_CHARACTERS = createField(DSL.name("maximum_characters"), SQLDataType.INTEGER, this, "");

    private Validation(Name alias, Table<ValidationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Validation(Name alias, Table<ValidationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.validation</code> table reference
     */
    public Validation(String alias) {
        this(DSL.name(alias), VALIDATION);
    }

    /**
     * Create an aliased <code>public.validation</code> table reference
     */
    public Validation(Name alias) {
        this(alias, VALIDATION);
    }

    /**
     * Create a <code>public.validation</code> table reference
     */
    public Validation() {
        this(DSL.name("validation"), null);
    }

    public <O extends Record> Validation(Table<O> child, ForeignKey<O, ValidationRecord> key) {
        super(child, key, VALIDATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ValidationRecord, Integer> getIdentity() {
        return (Identity<ValidationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ValidationRecord> getPrimaryKey() {
        return Keys.VALIDATION_PKEY;
    }

    @Override
    public List<ForeignKey<ValidationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VALIDATION__ELEMENT_ID_FKEY);
    }

    private transient Element _element;

    /**
     * Get the implicit join path to the <code>public.element</code> table.
     */
    public Element element() {
        if (_element == null)
            _element = new Element(this, Keys.VALIDATION__ELEMENT_ID_FKEY);

        return _element;
    }

    @Override
    public Validation as(String alias) {
        return new Validation(DSL.name(alias), this);
    }

    @Override
    public Validation as(Name alias) {
        return new Validation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Validation rename(String name) {
        return new Validation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Validation rename(Name name) {
        return new Validation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, ValidationDatatypeType, ValidationSubtypeType, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
