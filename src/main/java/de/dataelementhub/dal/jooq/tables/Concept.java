/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.tables.records.ConceptRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Concept extends TableImpl<ConceptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.concept</code>
     */
    public static final Concept CONCEPT = new Concept();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConceptRecord> getRecordType() {
        return ConceptRecord.class;
    }

    /**
     * The column <code>public.concept.id</code>.
     */
    public final TableField<ConceptRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.concept.system</code>.
     */
    public final TableField<ConceptRecord, String> SYSTEM = createField(DSL.name("system"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.concept.version</code>.
     */
    public final TableField<ConceptRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.concept.term</code>.
     */
    public final TableField<ConceptRecord, String> TERM = createField(DSL.name("term"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.concept.text</code>.
     */
    public final TableField<ConceptRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.concept.source_id</code>.
     */
    public final TableField<ConceptRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.concept.created_by</code>.
     */
    public final TableField<ConceptRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.concept.created_at</code>.
     */
    public final TableField<ConceptRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Concept(Name alias, Table<ConceptRecord> aliased) {
        this(alias, aliased, null);
    }

    private Concept(Name alias, Table<ConceptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.concept</code> table reference
     */
    public Concept(String alias) {
        this(DSL.name(alias), CONCEPT);
    }

    /**
     * Create an aliased <code>public.concept</code> table reference
     */
    public Concept(Name alias) {
        this(alias, CONCEPT);
    }

    /**
     * Create a <code>public.concept</code> table reference
     */
    public Concept() {
        this(DSL.name("concept"), null);
    }

    public <O extends Record> Concept(Table<O> child, ForeignKey<O, ConceptRecord> key) {
        super(child, key, CONCEPT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ConceptRecord, Integer> getIdentity() {
        return (Identity<ConceptRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConceptRecord> getPrimaryKey() {
        return Keys.CONCEPTS_PKEY;
    }

    @Override
    public List<UniqueKey<ConceptRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONCEPTS_SOURCE_ID_SYSTEM_VERSION_TERM_TEXT_KEY);
    }

    @Override
    public List<ForeignKey<ConceptRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONCEPT__SOURCE_ID_FKEY, Keys.CONCEPT__CONCEPT_CREATED_BY_FKEY);
    }

    private transient Source _source;
    private transient DehubUser _dehubUser;

    /**
     * Get the implicit join path to the <code>public.source</code> table.
     */
    public Source source() {
        if (_source == null)
            _source = new Source(this, Keys.CONCEPT__SOURCE_ID_FKEY);

        return _source;
    }

    /**
     * Get the implicit join path to the <code>public.dehub_user</code> table.
     */
    public DehubUser dehubUser() {
        if (_dehubUser == null)
            _dehubUser = new DehubUser(this, Keys.CONCEPT__CONCEPT_CREATED_BY_FKEY);

        return _dehubUser;
    }

    @Override
    public Concept as(String alias) {
        return new Concept(DSL.name(alias), this);
    }

    @Override
    public Concept as(Name alias) {
        return new Concept(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Concept rename(String name) {
        return new Concept(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Concept rename(Name name) {
        return new Concept(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
