/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables.daos;


import de.dataelementhub.dal.jooq.tables.Concept;
import de.dataelementhub.dal.jooq.tables.records.ConceptRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConceptDao extends DAOImpl<ConceptRecord, de.dataelementhub.dal.jooq.tables.pojos.Concept, Integer> {

    /**
     * Create a new ConceptDao without any configuration
     */
    public ConceptDao() {
        super(Concept.CONCEPT, de.dataelementhub.dal.jooq.tables.pojos.Concept.class);
    }

    /**
     * Create a new ConceptDao with an attached configuration
     */
    public ConceptDao(Configuration configuration) {
        super(Concept.CONCEPT, de.dataelementhub.dal.jooq.tables.pojos.Concept.class, configuration);
    }

    @Override
    public Integer getId(de.dataelementhub.dal.jooq.tables.pojos.Concept object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Concept.CONCEPT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchById(Integer... values) {
        return fetch(Concept.CONCEPT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.dataelementhub.dal.jooq.tables.pojos.Concept fetchOneById(Integer value) {
        return fetchOne(Concept.CONCEPT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchOptionalById(Integer value) {
        return fetchOptional(Concept.CONCEPT.ID, value);
    }

    /**
     * Fetch records that have <code>system BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfSystem(String lowerInclusive, String upperInclusive) {
        return fetchRange(Concept.CONCEPT.SYSTEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>system IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchBySystem(String... values) {
        return fetch(Concept.CONCEPT.SYSTEM, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfVersion(String lowerInclusive, String upperInclusive) {
        return fetchRange(Concept.CONCEPT.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchByVersion(String... values) {
        return fetch(Concept.CONCEPT.VERSION, values);
    }

    /**
     * Fetch records that have <code>term BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfTerm(String lowerInclusive, String upperInclusive) {
        return fetchRange(Concept.CONCEPT.TERM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>term IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchByTerm(String... values) {
        return fetch(Concept.CONCEPT.TERM, values);
    }

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfText(String lowerInclusive, String upperInclusive) {
        return fetchRange(Concept.CONCEPT.TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchByText(String... values) {
        return fetch(Concept.CONCEPT.TEXT, values);
    }

    /**
     * Fetch records that have <code>source_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfSourceId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Concept.CONCEPT.SOURCE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_id IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchBySourceId(Integer... values) {
        return fetch(Concept.CONCEPT.SOURCE_ID, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Concept.CONCEPT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchByCreatedBy(Integer... values) {
        return fetch(Concept.CONCEPT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Concept.CONCEPT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Concept> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Concept.CONCEPT.CREATED_AT, values);
    }
}
