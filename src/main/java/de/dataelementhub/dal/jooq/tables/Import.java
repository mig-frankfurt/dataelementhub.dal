/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.ProcessStatus;
import de.dataelementhub.dal.jooq.tables.records.ImportRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Import extends TableImpl<ImportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.import</code>
     */
    public static final Import IMPORT = new Import();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImportRecord> getRecordType() {
        return ImportRecord.class;
    }

    /**
     * The column <code>public.import.id</code>.
     */
    public final TableField<ImportRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.import.created_at</code>.
     */
    public final TableField<ImportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.import.created_by</code>.
     */
    public final TableField<ImportRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.import.namespace_id</code>.
     */
    public final TableField<ImportRecord, Integer> NAMESPACE_ID = createField(DSL.name("namespace_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.import.source</code>.
     */
    public final TableField<ImportRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.import.label</code>.
     */
    public final TableField<ImportRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.import.number_of_elements</code>.
     */
    public final TableField<ImportRecord, Integer> NUMBER_OF_ELEMENTS = createField(DSL.name("number_of_elements"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.import.status</code>.
     */
    public final TableField<ImportRecord, ProcessStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.ProcessStatus.class), this, "");

    private Import(Name alias, Table<ImportRecord> aliased) {
        this(alias, aliased, null);
    }

    private Import(Name alias, Table<ImportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.import</code> table reference
     */
    public Import(String alias) {
        this(DSL.name(alias), IMPORT);
    }

    /**
     * Create an aliased <code>public.import</code> table reference
     */
    public Import(Name alias) {
        this(alias, IMPORT);
    }

    /**
     * Create a <code>public.import</code> table reference
     */
    public Import() {
        this(DSL.name("import"), null);
    }

    public <O extends Record> Import(Table<O> child, ForeignKey<O, ImportRecord> key) {
        super(child, key, IMPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ImportRecord, Integer> getIdentity() {
        return (Identity<ImportRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImportRecord> getPrimaryKey() {
        return Keys.IMPORT_PKEY;
    }

    @Override
    public List<ForeignKey<ImportRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IMPORT__IMPORT_CREATED_BY_FKEY, Keys.IMPORT__IMPORT_NAMESPACE_ID_FKEY);
    }

    private transient DehubUser _dehubUser;
    private transient Element _element;

    /**
     * Get the implicit join path to the <code>public.dehub_user</code> table.
     */
    public DehubUser dehubUser() {
        if (_dehubUser == null)
            _dehubUser = new DehubUser(this, Keys.IMPORT__IMPORT_CREATED_BY_FKEY);

        return _dehubUser;
    }

    /**
     * Get the implicit join path to the <code>public.element</code> table.
     */
    public Element element() {
        if (_element == null)
            _element = new Element(this, Keys.IMPORT__IMPORT_NAMESPACE_ID_FKEY);

        return _element;
    }

    @Override
    public Import as(String alias) {
        return new Import(DSL.name(alias), this);
    }

    @Override
    public Import as(Name alias) {
        return new Import(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Import rename(String name) {
        return new Import(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Import rename(Name name) {
        return new Import(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDateTime, Integer, Integer, String, String, Integer, ProcessStatus> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
