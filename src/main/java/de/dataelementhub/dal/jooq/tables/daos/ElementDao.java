/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables.daos;


import de.dataelementhub.dal.jooq.enums.ElementType;
import de.dataelementhub.dal.jooq.tables.Element;
import de.dataelementhub.dal.jooq.tables.records.ElementRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementDao extends DAOImpl<ElementRecord, de.dataelementhub.dal.jooq.tables.pojos.Element, Integer> {

    /**
     * Create a new ElementDao without any configuration
     */
    public ElementDao() {
        super(Element.ELEMENT, de.dataelementhub.dal.jooq.tables.pojos.Element.class);
    }

    /**
     * Create a new ElementDao with an attached configuration
     */
    public ElementDao(Configuration configuration) {
        super(Element.ELEMENT, de.dataelementhub.dal.jooq.tables.pojos.Element.class, configuration);
    }

    @Override
    public Integer getId(de.dataelementhub.dal.jooq.tables.pojos.Element object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchById(Integer... values) {
        return fetch(Element.ELEMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.dataelementhub.dal.jooq.tables.pojos.Element fetchOneById(Integer value) {
        return fetchOne(Element.ELEMENT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchOptionalById(Integer value) {
        return fetchOptional(Element.ELEMENT.ID, value);
    }

    /**
     * Fetch records that have <code>element_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchRangeOfElementType(ElementType lowerInclusive, ElementType upperInclusive) {
        return fetchRange(Element.ELEMENT.ELEMENT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>element_type IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchByElementType(ElementType... values) {
        return fetch(Element.ELEMENT.ELEMENT_TYPE, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchRangeOfCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchByCreatedBy(Integer... values) {
        return fetch(Element.ELEMENT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>element_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchRangeOfElementId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.ELEMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>element_id IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchByElementId(Integer... values) {
        return fetch(Element.ELEMENT.ELEMENT_ID, values);
    }

    /**
     * Fetch records that have <code>permitted_value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchRangeOfPermittedValue(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.PERMITTED_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permitted_value IN (values)</code>
     */
    public List<de.dataelementhub.dal.jooq.tables.pojos.Element> fetchByPermittedValue(String... values) {
        return fetch(Element.ELEMENT.PERMITTED_VALUE, values);
    }
}
